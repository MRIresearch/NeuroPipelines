Bootstrap: docker
From: ubuntu:xenial

%help
Singularity container with FSL 6.0.1 and CUDA Toolkit 8.0

Please refer to https://github.com/MRIresearch/NeuroPipelines/blob/master/containers/nklab-fsl/README.md for more information about this container.


%setup

%files
./src/resting_pipeline.py /
./src/fsl_sub /
./src/statusfeat.py / 
./src/runfeat-1.py /
./src/make_fsl_stc.py / 
./src/startup.sh /
./src/readme /
./src/version / 

%environment
export LC_ALL=en_US.UTF-8
export BXHVER=bxh_xcede_tools-1.11.1-lsb30.x86_64
export BXHBIN=/opt/$BXHVER
export RSFMRI=/opt/rsfmri_python
export PATH=$BXHBIN/bin:$PATH
export PATH=$BXHBIN/lib:$PATH
export PATH=$RSFMRI/bin:$PATH

export PATH=/opt/bin:$PATH

export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/.singularity.d/libs:/usr/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/cuda/bin:$PATH

export FSLDIR=/opt/fsl
export PATH=$FSLDIR/bin:$PATH

%runscript
cd /opt/data
exec /opt/bin/startup.sh "$@"

%test

%post
mkdir -p /uaopt /extra /xdisk /rsgrps /opt/data /opt/bin /opt/work /opt/input /opt/output /cm/shared /cm/local /opt/config

export DEBIAN_FRONTEND=noninteractive
export TZ=America/Phoenix
ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

export BXHVER=bxh_xcede_tools-1.11.1-lsb30.x86_64
export BXHLOC=7384
export BXHBIN=/opt/$BXHVER
export RSFMRI=/opt/rsfmri_python

apt-get update

apt-get install -y \
locales 

echo "LC_ALL=en_US.UTF-8" >> /etc/environment
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
locale-gen en_US.UTF-8
export LC_ALL=en_US.UTF-8

apt-get install -y \
	nano \
	apt-utils \
	wget \
	curl \
        dc \
	lsb-core \
        unzip 

# libraries for mrtrix
apt-get install -y python \
        git \
        g++ \
        libeigen3-dev \
        zlib1g-dev \
        libqt4-opengl-dev \
        libgl1-mesa-dev \
        libfftw3-dev 

#libraries for freesurfer-dev
apt-get install -y  tcsh \
        libglu1-mesa-dev \
        gfortran \
        libxmu6

#libraries for freesurfer-HCP
apt-get install -y libfreetype6 \
libxrender1 \
libfontconfig1 \
libxss1 \
libxft2 \
libjpeg62 

#installation packages for fsl - need for cmake
apt-get install -y gtk2.0
#installation packages for fsl - need for cmake
apt-get install -y libxt-dev

#install libraries to resolve issue with  QGtkStyle could not resolve GTK
apt-get install -y libgnomeui-0
apt-get install -y libcanberra-gtk0

#install Qt 5.9.1 for freesurfer-dev
apt install -y software-properties-common
add-apt-repository universe
printf '\n' | add-apt-repository ppa:beineri/opt-qt591-xenial
apt-get update
apt install -y qt-latest 
#set up environmental variables
export PATH=/opt/qt591/bin:$PATH
export LD_LIBRARY_PATH=/opt/qt591/lib:$LD_LIBRARY_PATH
export QT_SELECT=opt-qt591
export QTTOOLDIR=/opt/qt51/bin
export QTLIBDIR=/opt/qt591/lib
        
cd /tmp        
apt purge -y python-pip
apt purge -y python3-pip
curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py
python get-pip.py
python3 get-pip.py

pip install numpy==1.16.0

# Identify number of cores if needed further below
export NUMCORES=$(grep -c ^processor /proc/cpuinfo)
echo "using $NUMCORES processors"

#install CUDA 8.0
cd /tmp
wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run
mkdir -p nvidia_installers
chmod +x cuda_8.0.61_375.26_linux-run
./cuda_8.0.61_375.26_linux-run -extract=`pwd`/nvidia_installers
rm cuda_8.0.61_375.26_linux-run
cd nvidia_installers
./cuda*.run --tar mxvf
cp InstallUtils.pm /usr/lib/x86_64-linux-gnu/perl-base 
rm cuda-samples*
rm NVIDIA-Linux*
./cuda-linux64-rel-8.0.61-21551265.run -noprompt
wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/patches/2/cuda_8.0.61.2_linux-run
chmod +x cuda_8.0.61.2_linux-run
./cuda_8.0.61.2_linux-run --silent --accept-eula 
cd ..
rm -R nvidia_installers
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/.singularity.d/libs:$LD_LIBRARY_PATH
export PATH=/usr/local/cuda/bin:$PATH

cd /tmp
wget https://cmake.org/files/v3.12/cmake-3.12.0-rc3.tar.gz
tar xz -f cmake-3.12.0-rc3.tar.gz
rm cmake-3.12.0-rc3.tar.gz
cd cmake-3.12.0-rc3
./configure
make
make install
./bootstrap --prefix=/usr
make
make install

cd /tmp
wget http://www.vtk.org/files/release/7.1/VTK-7.1.1.tar.gz
tar xz -f VTK-7.1.1.tar.gz
rm VTK-7.1.1.tar.gz
cd VTK-7.1.1
cmake .
make
make install

cd /opt
export FSLDIR=/opt/fsl-5.0.6
export PATH=${FSLDIR}/bin:${PATH}
wget https://www.dropbox.com/s/97n835up7zwaib4/fsl-5.0.6-sources.tar.gz
tar xz -f fsl-5.0.6-sources.tar.gz
mv fsl fsl-5.0.6
rm fsl-5.0.6-sources.tar.gz
chmod -R 777 fsl-5.0.6
sed -i 's/#FSLCONFDIR/FSLCONFDIR/g' ${FSLDIR}/etc/fslconf/fsl.sh
sed -i 's/#FSLMACHTYPE/FSLMACHTYPE/g' ${FSLDIR}/etc/fslconf/fsl.sh
sed -i 's/#export FSLCONFDIR/export FSLCONFDIR /g' ${FSLDIR}/etc/fslconf/fsl.sh
. ${FSLDIR}/etc/fslconf/fsl.sh
cp -r ${FSLDIR}/config/linux_64-gcc4.4 ${FSLDIR}/config/${FSLMACHTYPE}
sed -i "s#-O3#-g -O3 -fpermissive#g" $FSLDIR/config/$FSLMACHTYPE/systemvars.mk
sed -i "s#-m64#-m32#g" $FSLDIR/config/$FSLMACHTYPE/systemvars.mk
sed -i "s#OPTFLAGS =#OPTFLAGS = -fpermissive#g" $FSLDIR/src/melodic/Makefile
sed -i "s#OPTFLAGS =#OPTFLAGS = -fpermissive#g" $FSLDIR/src/fabber/Makefile
sed -i "s#scl enable devtoolset-2 -- c++#c++#g" $FSLDIR/config/$FSLMACHTYPE/systemvars.mk
sed -i "s#CUDA_INSTALLATION = /opt/cuda-7.5#CUDA_INSTALLATION = /usr/local/cuda-8.0#g" $FSLDIR/config/$FSLMACHTYPE/systemvars.mk
sed -i "s#VTKDIR_INC = /home/fs0/cowboy/var/caper_linux_64-gcc4.4/VTK7/include/vtk-7.0#VTKDIR_INC = /usr/local/include/vtk-7.1/#g" $FSLDIR/config/$FSLMACHTYPE/externallibs.mk
sed -i "s#VTKDIR_LIB = /home/fs0/cowboy/var/caper_linux_64-gcc4.4/VTK7/lib#VTKDIR_LIB = /usr/local/lib/#g" $FSLDIR/config/$FSLMACHTYPE/externallibs.mk
sed -i "s#VTKSUFFIX = -7.0#VTKSUFFIX = -7.1#g" $FSLDIR/config/$FSLMACHTYPE/externallibs.mk
sed -i "s#lpng -lz#lpng -lz -lm#g" $FSLDIR/src/miscvis/Makefile
cd ${FSLDIR}
./build


cd /opt
wget https://fsl.fmrib.ox.ac.uk/fsldownloads/fslinstaller.py
export FSLDIR=/opt/fsl
export PATH=${FSLDIR}/bin:${PATH}
python2.7 fslinstaller.py -q -d $FSLDIR

#install probtrackx2 for CUDA 8.0 - note that the commented link is for FSL 5.* versions
#the link that is used below is for FSL 6.* versions.
mkdir -p /tmp/probtrackx
cd /tmp/probtrackx
#wget http://users.fmrib.ox.ac.uk/~moisesf/Probtrackx_GPU/CUDA_8.0/probtrackx2_gpu.zip
wget http://users.fmrib.ox.ac.uk/~moisesf/Probtrackx_GPU/FSL_6/CUDA_8.0/probtrackx2_gpu.zip
unzip probtrackx2_gpu.zip
rm -f probtrackx2_gpu.zip
mv probtrackx2_gpu $FSLDIR/bin

#install probtrackx2 for CUDA 8.0 - note that the commented link is for FSL 5.* versions
#the link below is for FSL 6.* versions
mkdir -p /tmp/bedpost
cd /tmp/bedpost
#wget http://users.fmrib.ox.ac.uk/~moisesf/Bedpostx_GPU/CUDA_8.0/bedpostx_gpu.zip
wget http://users.fmrib.ox.ac.uk/~moisesf/Bedpostx_GPU/FSL_6/CUDA_8.0/bedpostx_gpu.zip
unzip bedpostx_gpu.zip
rm -f bedpostx_gpu.zip
cp /tmp/bedpost/bin/* $FSLDIR/bin
cp /tmp/bedpost/lib/* $FSLDIR/lib
rm -r /tmp/bedpost
sed -i 's\#!/bin/sh\#!/bin/bash\g' $FSLDIR/bin/bedpostx_postproc_gpu.sh

cd /tmp
wget "http://www.nitrc.org/frs/download.php/$BXHLOC/$BXHVER.tgz"
wget "https://wiki.biac.duke.edu/_media/biac:analysis:rsfmri_python.tgz"
tar -xzf $BXHVER.tgz -C /opt
mv biac:analysis:rsfmri_python.tgz rsfmri_python.tgz
tar -xzf rsfmri_python.tgz  -C /opt
rm rsfmri_python.tgz
rm $BXHVER.tgz

chmod -R 777 /opt

mv /resting_pipeline.py /opt/rsfmri_python/bin
mv /fsl_sub $FSLDIR/bin
mv /statusfeat.py /opt/bin
mv /runfeat-1.py /opt/bin
mv /make_fsl_stc.py /opt/bin
mv /startup.sh /opt/bin
mv /readme /opt/bin
mv /version /opt/bin
